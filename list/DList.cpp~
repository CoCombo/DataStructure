#include <iostream>
#include <stdexcept>
#include "DList.h"

template <typename T>
DList<T>::DList()
{
    listSize = 0;
    head = new Node;
    tail = new Node;

    head->next = tail;
    tail->prev = head;
}

template <typename T>
DList<T>::~DList()
{
    clear();
}

template <typename T>
void DList<T>::push_back(const T &_element)
{
    Node *tmp = new Node(_element);

    tmp->prev        = tail->prev; 
    tmp->next        = tail;
    tail->prev->next = tail;
    tail->prev       = tmp;

    listSize++;
}

template <typename T>
void DList<T>::push_front(const T &_element)
{
    Node *tmp = new Node(_element);

    tmp->prev        = head;
    tmp->next        = head->next;
    head->next->prev = tail;
    head->next       = tail;

    listSize++;
}

template <typename T>
T DList<T>::pop_back()
{
    if( listSize == 0)
{	//std::runtime_error err;
	throw std::runtime_error("List empty!");}

    T tmp         = tail->prev->element;
    auto tmpNode  = tail->prev;

    tmpNode->prev->next = tail;
    tail->prev          = tmpNode->prev;

    delete tmpNode;
    listSize--;

    return tmp;
}

template <typename T>
T DList<T>::pop_front()
{
    if(listSize == 0)
	{//std::runtime_error err;
	throw std::runtime_error("List empty!");}

    T tmp         = head->next->element;
    auto tmpNode  = head->next;

    head->next          = tmpNode->next;
    tmpNode->next->prev = head;

    delete tmpNode;
    listSize--;

    return tmp;
}

template <typename T>
void DList<T>::clear()
{
    for(auto current = head->next; listSize != 0; listSize--)
    {
	auto nextNode = current->next;

	delete current;

	current = nextNode;
    }
    delete head;
    delete tail;
}

template <typename T>
void DList<T>::print()
{
    if(listSize == 0)
{	//std::runtime_error err;
	throw std::runtime_error("List emty!");}
    for(auto current = head->next; current != tail; current = current->nest)
	std::cout << current->element << std::endl;
}
